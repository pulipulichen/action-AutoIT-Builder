name: CI
on: 
  push:
  # schedule:
    # - cron:  "0 2 * * *"
permissions:
  contents: write
jobs:
  build-and-deploy:
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession. 
    runs-on: 	windows-2019
    steps:
      # ----------------------------------------------------------------

      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      # ----------------------------------------------------------------

      - name: Cache
        id: cache
        uses: actions/cache@v3
        env:
          cache-name: cache
        with:
          path: C:\"Program Files (x86)"\AutoIt3\Aut2Exe\
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('C:\"Program Files (x86)"\AutoIt3\Aut2Exe\Aut2exe.exe') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Prepare files
        run: |
          mkdir C:\"Program Files (x86)"\AutoIt3\Aut2Exe\input
          mkdir C:\"Program Files (x86)"\AutoIt3\Aut2Exe\output
          Copy-Item "input\*" -Destination C:\"Program Files (x86)"\AutoIt3\Aut2Exe\input

      # ----------------------------------------------------------------

      - name: Convert Image to ICO
        run: |
            c:
            cd "C:\Program Files (x86)\AutoIt3\Aut2Exe"
            
            $sourceDir = "C:\Program Files (x86)\AutoIt3\Aut2Exe"
            $outputDir = "output"
            $inputDir = "input"
  
            function Convert-ImgToIco {
                param (
                    [string]$input
                )

                $inputFilenameNoExt = [System.IO.Path]::GetFileNameWithoutExtension($input)
                $sourceFilePath = "$sourceDir\$inputDir\$input"
                $icoFilePath = "$sourceDir\$inputDir\$inputFilenameNoExt.ico"

                Write-Host $sourceFilePath
                Write-Host $icoFilePath

                # Load the PNG file as a bitmap
                $bitmap = [System.Drawing.Bitmap]::FromFile($sourceFilePath)

                # Create a new icon with a 64x64 size
                $icon = New-Object System.Drawing.Icon($bitmap, 64, 64)

                # Save the icon to the ICO file
                $icon.Save($icoFilePath)

                # Dispose of the bitmap and icon objects
                $bitmap.Dispose()
                $icon.Dispose()

                Write-Host "Conversion complete. Icon saved to: $icoFilePath"
            }
  
            # Declare an array
            $imageTypes = @("png", "gif", "jpg", "jpeg", "webp")

            # Loop through each element and echo (write) it
            foreach ($type in $imageTypes) {
              $files = Get-ChildItem -Path "$sourceDir\$inputDir\*.$type"
              foreach ($file in $files) {
                  Convert-ImgToIco -input $file.Name
              }
            }

            dir
      
      # ----------------------------------------------------------------

      
      - name: Install Autoit
        run: |
          if (!(Test-Path "C:\Program Files (x86)\AutoIt3\Aut2Exe\Aut2exe.exe")) { 
            cd compiler
            ./autoit-v3-setup.exe /S 
            Start-Sleep -s 3
          }


      - name: Compile
        run: |
          c:
          cd "C:\Program Files (x86)\AutoIt3\Aut2Exe"
          
          $sourceDir = "C:\Program Files (x86)\AutoIt3\Aut2Exe"
          $outputDir = "output"
          $inputDir = "input"

          $au3Files = Get-ChildItem -Path "$sourceDir\$inputDir\*.au3"

          foreach ($au3File in $au3Files) {
              $filename = [System.IO.Path]::GetFileNameWithoutExtension($au3File.Name)
              $command = "./Aut2exe_x64.exe /in `"$sourceDir\$inputDir\$($au3File.Name)`" /out `"$sourceDir\$outputDir\$filename.exe`" /icon `"$sourceDir\$inputDir\$filename.ico`" /comp 4 /x64"
              Write-Host "Running: $command"
              Invoke-Expression $command
          }

      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYYMMDD-HHmmSS
          utcOffset: "+08:00"

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: AutoITBuilder_${{ steps.current-time.outputs.formattedTime }}
          path: C:\Program Files (x86)\AutoIt3\Aut2Exe\output
          if-no-files-found: error